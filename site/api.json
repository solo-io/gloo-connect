{
  "files": [
    {
      "name": "config.proto",
      "description": "",
      "package": "qloo.api.v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Config",
          "longName": "Config",
          "fullName": "qloo.api.v1.Config",
          "description": "Config is a top-level config object. It is used internally by QLoo as a container for the entire set of config objects.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "schemas",
              "description": "the set of all schemas defined by the user",
              "label": "repeated",
              "type": "Schema",
              "longType": "Schema",
              "fullType": "qloo.api.v1.Schema",
              "defaultValue": ""
            },
            {
              "name": "resolver_maps",
              "description": "the set of all resolver maps defined by the user",
              "label": "repeated",
              "type": "ResolverMap",
              "longType": "ResolverMap",
              "fullType": "qloo.api.v1.ResolverMap",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "resolver_map.proto",
      "description": "",
      "package": "qloo.api.v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "ResolverMap",
          "longName": "ResolverMap",
          "fullName": "qloo.api.v1.ResolverMap",
          "description": "The ResolverMap object maps Resolvers to the fields in the GraphQL Schema\nThe skeleton of a Resolver Map will be generated by QLoo automatically when a schema\nis read or updated if one does not alreay exist.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Name of the Resolver Map. Resolver Map names must be unique\n\nResolver Map Names must be unique and follow the following syntax rules:\nOne or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "types",
              "description": "Types is a map of Type Names (defined in the schema) to a TypeResolver, which contain resolvers for the\nspecific fields of the type",
              "label": "repeated",
              "type": "TypesEntry",
              "longType": "ResolverMap.TypesEntry",
              "fullType": "qloo.api.v1.ResolverMap.TypesEntry",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status indicates the validation status of the role resource.\nStatus is read-only by clients, and set by gloo during validation",
              "label": "",
              "type": "Status",
              "longType": "gloo.api.v1.Status",
              "fullType": "gloo.api.v1.Status",
              "defaultValue": ""
            },
            {
              "name": "metadata",
              "description": "Metadata contains the resource metadata for the role",
              "label": "",
              "type": "Metadata",
              "longType": "gloo.api.v1.Metadata",
              "fullType": "gloo.api.v1.Metadata",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TypesEntry",
          "longName": "ResolverMap.TypesEntry",
          "fullName": "qloo.api.v1.ResolverMap.TypesEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "TypeResolver",
              "longType": "TypeResolver",
              "fullType": "qloo.api.v1.TypeResolver",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TypeResolver",
          "longName": "TypeResolver",
          "fullName": "qloo.api.v1.TypeResolver",
          "description": "TypeResolver contains the individual resolvers for each field for a specific type",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "fields",
              "description": "This is a map of Field Names to the resolver that QLoo should invoke when a query arrives for that field",
              "label": "repeated",
              "type": "FieldsEntry",
              "longType": "TypeResolver.FieldsEntry",
              "fullType": "qloo.api.v1.TypeResolver.FieldsEntry",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "FieldsEntry",
          "longName": "TypeResolver.FieldsEntry",
          "fullName": "qloo.api.v1.TypeResolver.FieldsEntry",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "key",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "value",
              "description": "",
              "label": "",
              "type": "Resolver",
              "longType": "Resolver",
              "fullType": "qloo.api.v1.Resolver",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Resolver",
          "longName": "Resolver",
          "fullName": "qloo.api.v1.Resolver",
          "description": "Resolvers define the actual logic QLoo needs to know in order to resolve a specific field query",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "gloo_resolver",
              "description": "a GlooResolver, which leverages Gloo to retrieve data from backend services and functions for the query",
              "label": "",
              "type": "GlooResolver",
              "longType": "GlooResolver",
              "fullType": "qloo.api.v1.GlooResolver",
              "defaultValue": ""
            },
            {
              "name": "template_resolver",
              "description": "a TemplateResolver, which uses Go Templates to generate data for the query",
              "label": "",
              "type": "TemplateResolver",
              "longType": "TemplateResolver",
              "fullType": "qloo.api.v1.TemplateResolver",
              "defaultValue": ""
            },
            {
              "name": "nodejs_resolver",
              "description": "a NodeJSResolver, which calls NodeJS functions to return data for the query",
              "label": "",
              "type": "NodeJSResolver",
              "longType": "NodeJSResolver",
              "fullType": "qloo.api.v1.NodeJSResolver",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "GlooResolver",
          "longName": "GlooResolver",
          "fullName": "qloo.api.v1.GlooResolver",
          "description": "GlooResolvers are the \"meat\" of QLoo. GlooResolvers tell QLoo how to invoke a \"Gloo Function\"",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "request_template",
              "description": "the Request Template, if specified, will become the body of the HTTP request used to invoke a function through Gloo\ninput parameters, if needed, should be specified in the request template. See QLoo's [Resolver documentation](TODO)\nfor more information on Request Templates.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "response_template",
              "description": "The response template, if specified, will transform the body of HTTP responses returned by Gloo functions.\nThis field should be used if the object returned by the Gloo Function does not match the type specified in the GraphQL schema.\nIt can also be used to modify or transform responses from their original state. See QLoo's [Resolver documentation](TODO)\nfor more information on Response Templates.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "content_type",
              "description": "Optional. Use to set the outbound HTTP Request header `Content-Type`. Defaults to `application/json`",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "single_function",
              "description": "SingleFunction specifies this resolver will always invoke a single function.",
              "label": "",
              "type": "Function",
              "longType": "Function",
              "fullType": "qloo.api.v1.Function",
              "defaultValue": ""
            },
            {
              "name": "multi_function",
              "description": "MultiFunction specifies the resolver will distribute invocation across multiple functions",
              "label": "",
              "type": "MultiFunction",
              "longType": "MultiFunction",
              "fullType": "qloo.api.v1.MultiFunction",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "Function",
          "longName": "Function",
          "fullName": "qloo.api.v1.Function",
          "description": "A reference to a function known to Gloo",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "upstream",
              "description": "Name of the Gloo Upstream that provides this function",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "function",
              "description": "Name of the function itself. See Gloo documentation for more details on functions in Gloo",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "MultiFunction",
          "longName": "MultiFunction",
          "fullName": "qloo.api.v1.MultiFunction",
          "description": "A reference to a list of functions known to Gloo",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "weighted_functions",
              "description": "A list of functions with weights. Must have size \u003e= 1",
              "label": "repeated",
              "type": "WeightedFunction",
              "longType": "WeightedFunction",
              "fullType": "qloo.api.v1.WeightedFunction",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "WeightedFunction",
          "longName": "WeightedFunction",
          "fullName": "qloo.api.v1.WeightedFunction",
          "description": "",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "function",
              "description": "the function to call",
              "label": "",
              "type": "Function",
              "longType": "Function",
              "fullType": "qloo.api.v1.Function",
              "defaultValue": ""
            },
            {
              "name": "weight",
              "description": "Invoking each functoion will be balanced by the ratio of the function's weight to the total weight on a resolver",
              "label": "",
              "type": "uint32",
              "longType": "uint32",
              "fullType": "uint32",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "TemplateResolver",
          "longName": "TemplateResolver",
          "fullName": "qloo.api.v1.TemplateResolver",
          "description": "A Go-template which will return data for a Resolver without making a function call. Template Resolvers can make use\nof QLoo's builtin template functions as well as the data provided by the Params object to the resolver.\nRead more about Templates and Resolvers in QLoo's [Resolver documentation](TODO).",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "inline_template",
              "description": "the Go template as an inline string",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        },
        {
          "name": "NodeJSResolver",
          "longName": "NodeJSResolver",
          "fullName": "qloo.api.v1.NodeJSResolver",
          "description": "NOTE: currently unsupported",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "inline_code",
              "description": "",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    },
    {
      "name": "schema.proto",
      "description": "",
      "package": "qloo.api.v1",
      "hasEnums": false,
      "hasExtensions": false,
      "hasMessages": true,
      "hasServices": false,
      "enums": [],
      "extensions": [],
      "messages": [
        {
          "name": "Schema",
          "longName": "Schema",
          "fullName": "qloo.api.v1.Schema",
          "description": "The Schema object wraps the user's GraphQL Schema, which is stored as an inline string.\nThe Schema Object contains a Status field which is used by QLoo to validate the user's input schema.",
          "hasExtensions": false,
          "hasFields": true,
          "extensions": [],
          "fields": [
            {
              "name": "name",
              "description": "Schema Names must be unique and follow the following syntax rules:\nOne or more lowercase rfc1035/rfc1123 labels separated by '.' with a maximum length of 253 characters.",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "resolver_map",
              "description": "name of the resolver map to use to resolve this schema.\nif the user leaves this empty, QLoo will generate the skeleton of a resolver map for the user",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "inline_schema",
              "description": "inline the entire graphql schema as a string here",
              "label": "",
              "type": "string",
              "longType": "string",
              "fullType": "string",
              "defaultValue": ""
            },
            {
              "name": "status",
              "description": "Status indicates the validation status of the role resource.\nStatus is read-only by clients, and set by gloo during validation",
              "label": "",
              "type": "Status",
              "longType": "gloo.api.v1.Status",
              "fullType": "gloo.api.v1.Status",
              "defaultValue": ""
            },
            {
              "name": "metadata",
              "description": "Metadata contains the resource metadata for the role",
              "label": "",
              "type": "Metadata",
              "longType": "gloo.api.v1.Metadata",
              "fullType": "gloo.api.v1.Metadata",
              "defaultValue": ""
            }
          ]
        }
      ],
      "services": []
    }
  ],
  "scalarValueTypes": [
    {
      "protoType": "double",
      "notes": "",
      "cppType": "double",
      "csType": "double",
      "goType": "float64",
      "javaType": "double",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "float",
      "notes": "",
      "cppType": "float",
      "csType": "float",
      "goType": "float32",
      "javaType": "float",
      "phpType": "float",
      "pythonType": "float",
      "rubyType": "Float"
    },
    {
      "protoType": "int32",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "int64",
      "notes": "Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "uint32",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "uint64",
      "notes": "Uses variable-length encoding.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint32",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sint64",
      "notes": "Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "fixed32",
      "notes": "Always four bytes. More efficient than uint32 if values are often greater than 2^28.",
      "cppType": "uint32",
      "csType": "uint",
      "goType": "uint32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "fixed64",
      "notes": "Always eight bytes. More efficient than uint64 if values are often greater than 2^56.",
      "cppType": "uint64",
      "csType": "ulong",
      "goType": "uint64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "sfixed32",
      "notes": "Always four bytes.",
      "cppType": "int32",
      "csType": "int",
      "goType": "int32",
      "javaType": "int",
      "phpType": "integer",
      "pythonType": "int",
      "rubyType": "Bignum or Fixnum (as required)"
    },
    {
      "protoType": "sfixed64",
      "notes": "Always eight bytes.",
      "cppType": "int64",
      "csType": "long",
      "goType": "int64",
      "javaType": "long",
      "phpType": "integer/string",
      "pythonType": "int/long",
      "rubyType": "Bignum"
    },
    {
      "protoType": "bool",
      "notes": "",
      "cppType": "bool",
      "csType": "bool",
      "goType": "bool",
      "javaType": "boolean",
      "phpType": "boolean",
      "pythonType": "boolean",
      "rubyType": "TrueClass/FalseClass"
    },
    {
      "protoType": "string",
      "notes": "A string must always contain UTF-8 encoded or 7-bit ASCII text.",
      "cppType": "string",
      "csType": "string",
      "goType": "string",
      "javaType": "String",
      "phpType": "string",
      "pythonType": "str/unicode",
      "rubyType": "String (UTF-8)"
    },
    {
      "protoType": "bytes",
      "notes": "May contain any arbitrary sequence of bytes.",
      "cppType": "string",
      "csType": "ByteString",
      "goType": "[]byte",
      "javaType": "ByteString",
      "phpType": "string",
      "pythonType": "str",
      "rubyType": "String (ASCII-8BIT)"
    }
  ]
}