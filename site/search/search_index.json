{
    "docs": [
        {
            "location": "/",
            "text": "The Envoy Filter for Consul Connect\n\n\n\n\n\n    \n\n  \n\n  The Codeless GraphQL Engine\n\n\n\n\nWhat is Gloo Connect?\n\n\nGloo Connect is built on top of \nConsul\n and \nGloo\n to enable real time route authorization and response configuration management. Gloo Connect leverages Consul's Level 3/4 TCP authentication and Gloo's Level 7 function routing to provide a complete secure, observable, and configurable service delivery environment.\n\n\n\nFeatures\n\n\n\n\nLow Latency Authentication\n: Consul's credential management and Gloo Connect's plugins to Envoy combine to provide authentication with minimal overhead\n\n\nDeployment Flexibility\n: Integrates with your exisiting infrastructure\n\n\nSecure Feature Release Management\n: Function and request level configuration provides devops teams grainular real time control of feature deployment.\n\n\n\n\nBlogs & Demos\n\n\n\n\nAnnouncement Blog\n\n\n\n\nCommunity\n\n\nJoin us on our slack channel: \nhttps://slack.solo.io/\n\n\n\n\nThanks\n\n\nQLoo\n would not be possible without the valuable open-source work of projects in the community. We would like to extend\na special thank-you to \nEnvoy\n and \ngqlgen\n server library.",
            "title": "Index"
        },
        {
            "location": "/#what-is-gloo-connect",
            "text": "Gloo Connect is built on top of  Consul  and  Gloo  to enable real time route authorization and response configuration management. Gloo Connect leverages Consul's Level 3/4 TCP authentication and Gloo's Level 7 function routing to provide a complete secure, observable, and configurable service delivery environment.",
            "title": "What is Gloo Connect?"
        },
        {
            "location": "/#features",
            "text": "Low Latency Authentication : Consul's credential management and Gloo Connect's plugins to Envoy combine to provide authentication with minimal overhead  Deployment Flexibility : Integrates with your exisiting infrastructure  Secure Feature Release Management : Function and request level configuration provides devops teams grainular real time control of feature deployment.",
            "title": "Features"
        },
        {
            "location": "/#blogs-demos",
            "text": "Announcement Blog",
            "title": "Blogs &amp; Demos"
        },
        {
            "location": "/#community",
            "text": "Join us on our slack channel:  https://slack.solo.io/",
            "title": "Community"
        },
        {
            "location": "/#thanks",
            "text": "QLoo  would not be possible without the valuable open-source work of projects in the community. We would like to extend\na special thank-you to  Envoy  and  gqlgen  server library.",
            "title": "Thanks"
        },
        {
            "location": "/introduction/introduction/",
            "text": "Introduction\n\n\nWhat is QLoo?\n\n\nQLoo is a GraphQL Server built on top of \nGloo\n and the \nEnvoy Proxy\n.\n\n\nQLoo leverages Gloo's function registry and Envoy's advanced HTTP routing features to provide a GraphQL frontend\nfor REST/gRPC applications and serverless functions. QLoo routes requests to data sources via Envoy, leveraging\nEnvoy \nHTTP filters\n\nfor security, load balancing, and more.\n\n\nQLoo makes HTTP requests through Gloo to invoke service endpoints and serverless functions through Gloo. QLoo users\nimport their GraphQL Schemas and attach \nGloo functions\n to the fields of their schemas. QLoo uses Gloo functions to generate\nits own resolvers, allowing users to get a fully-functional GraphQL frontend for their serverless functions and services\nwithout writing any code. This is why we call QLoo the \nCodeless GraphQL Server\n.\n\n\nUsing QLoo\n\n\nCompared to typical GraphQL implementations, QLoo's configuration API is quite simple. Configuration takes two steps:",
            "title": "Introduction"
        },
        {
            "location": "/introduction/introduction/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/introduction/introduction/#what-is-qloo",
            "text": "QLoo is a GraphQL Server built on top of  Gloo  and the  Envoy Proxy .  QLoo leverages Gloo's function registry and Envoy's advanced HTTP routing features to provide a GraphQL frontend\nfor REST/gRPC applications and serverless functions. QLoo routes requests to data sources via Envoy, leveraging\nEnvoy  HTTP filters \nfor security, load balancing, and more.  QLoo makes HTTP requests through Gloo to invoke service endpoints and serverless functions through Gloo. QLoo users\nimport their GraphQL Schemas and attach  Gloo functions  to the fields of their schemas. QLoo uses Gloo functions to generate\nits own resolvers, allowing users to get a fully-functional GraphQL frontend for their serverless functions and services\nwithout writing any code. This is why we call QLoo the  Codeless GraphQL Server .",
            "title": "What is QLoo?"
        },
        {
            "location": "/introduction/introduction/#using-qloo",
            "text": "Compared to typical GraphQL implementations, QLoo's configuration API is quite simple. Configuration takes two steps:",
            "title": "Using QLoo"
        },
        {
            "location": "/introduction/overview/",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/introduction/architecture/",
            "text": "Architecture\n\n\nThe architecture of Gloo Connect can be understood as follows:\n\n\n\n\nA new service with connect settings is added to Consul using Gloo Connect as a managed proxy. \n\n\nConsul then initiates the Gloo-Consul Bridge process, where Gloo-Consul Bridge retrieves certificates and configuration information from Consul. Certificates are then written to disk to make them available to Envoy.\n\n\nIn the near future, certificates will be delivered directly to Envoy over SDS and not written to disk. This process configures Envoy with the control plane settings and starts it. \n\n\nGloo Connect constantly monitors Consul Connect and updates the control plane whenever changes are detected and Envoy is hot-restarted. Envoy receives configuration from the Gloo Connect control plane and serves mesh data!\n\n\nThe data flows as follows: \n\n\n\n\nA request arrives from the mesh to the local Envoy.\n\n\nGloo Connect filter checks if the connection is authorized with the local agent.\n\n\nIf the request is authorized by the agent it is forwarded to the service.",
            "title": "Architecture"
        },
        {
            "location": "/introduction/architecture/#architecture",
            "text": "The architecture of Gloo Connect can be understood as follows:   A new service with connect settings is added to Consul using Gloo Connect as a managed proxy.   Consul then initiates the Gloo-Consul Bridge process, where Gloo-Consul Bridge retrieves certificates and configuration information from Consul. Certificates are then written to disk to make them available to Envoy.  In the near future, certificates will be delivered directly to Envoy over SDS and not written to disk. This process configures Envoy with the control plane settings and starts it.   Gloo Connect constantly monitors Consul Connect and updates the control plane whenever changes are detected and Envoy is hot-restarted. Envoy receives configuration from the Gloo Connect control plane and serves mesh data!  The data flows as follows:    A request arrives from the mesh to the local Envoy.  Gloo Connect filter checks if the connection is authorized with the local agent.  If the request is authorized by the agent it is forwarded to the service.",
            "title": "Architecture"
        },
        {
            "location": "/installation/kubernetes/",
            "text": "TODO",
            "title": "Installing on Kubernetes"
        },
        {
            "location": "/installation/kubernetes/#todo",
            "text": "",
            "title": "TODO"
        },
        {
            "location": "/getting_started/tmp2/",
            "text": "TODO",
            "title": "Kubernetes"
        },
        {
            "location": "/getting_started/tmp2/#todo",
            "text": "",
            "title": "TODO"
        }
    ]
}